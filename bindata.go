// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/ascii.table
// data/default.js
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAsciiTable = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x47\x03\xd1\xb1\x06\x86\x46\xc6\x26\xa6\x66\xe6\x16\x96\x20\xbe\x82\xa2\x92\xb2\x8a\xaa\x9a\xba\x86\xa6\x96\xb6\x8e\xae\x9e\x3e\x42\xd6\xca\xda\xc6\xd6\xce\xde\xc1\xd1\xc9\xd9\xc5\xd5\xcd\xdd\xc3\xd3\xcb\xdb\xc7\xd7\xcf\x3f\x20\x30\x28\x38\x24\x34\x2c\x3c\x22\x32\x2a\x3a\x26\x36\x2e\x5e\x3d\x31\x29\x39\x25\x35\x2d\x3d\x23\x33\x2b\x3b\x27\x37\x2f\xbf\xa0\xb0\xa8\xb8\xa4\xb4\xac\xbc\xa2\xb2\xaa\xba\xa6\xb6\x0e\xdd\x7a\xba\xdb\xcf\xcb\xc5\xcb\x05\x08\x00\x00\xff\xff\x7f\x57\x39\xd5\x04\x01\x00\x00")

func dataAsciiTableBytes() ([]byte, error) {
	return bindataRead(
		_dataAsciiTable,
		"data/ascii.table",
	)
}

func dataAsciiTable() (*asset, error) {
	bytes, err := dataAsciiTableBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/ascii.table", size: 260, mode: os.FileMode(493), modTime: time.Unix(1569577427, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDefaultJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xcd\x8a\xdb\x30\x10\xc7\xef\x81\xbc\xc3\x1f\x9d\x6c\x22\xcc\x96\xde\xba\xf5\xb5\x94\x42\xb7\x85\xed\x6d\x1d\x8c\x48\xc6\x89\xa8\x2d\x1b\x69\x12\x92\x66\xfd\xee\x45\x92\xe3\x24\x8b\x97\xec\x25\xd1\x7c\xfc\x34\xa3\xf9\x70\xb5\x33\x2b\xd6\xad\x41\xd9\x21\xd1\x66\x4d\x86\xcb\x9a\xf6\x54\x4b\xfc\xa5\xa3\xc4\x5e\xd5\x3b\x4a\x71\x9a\xcf\x80\x06\x39\x84\xf0\xa7\xaa\xb5\x48\x0e\xf9\xc3\x23\x0e\x5f\x71\x4d\x3d\xe2\xb0\x58\x0c\xee\x11\x68\xb0\x80\x28\x38\x60\xbd\xff\xb1\xc4\x3b\x6b\x06\xbd\x10\x58\xf8\x40\x51\xf8\x82\xa8\x08\x41\x07\xfb\x7c\xd6\xcf\x67\xf3\xd9\x98\x67\x6b\xca\x4a\x1b\xed\xb6\x48\x1c\x2b\x26\x09\xff\xe7\x24\x1c\xd9\x3d\xd9\x21\x76\x67\xb5\xe1\x44\x9c\x0a\x23\xd2\x8b\x5c\x76\xc9\x27\x09\xb1\x6d\x1d\x1b\xd5\x90\x90\x70\xca\x28\xd6\xff\x28\x89\x74\xf6\x7d\x30\xa5\xa9\x84\x90\x93\x74\xa3\xba\xf2\x1d\xfa\xa7\xea\x3e\x00\x57\xba\x9e\x84\xdb\x35\xd5\xb5\x76\xfc\xf2\xb0\x4c\x53\xf9\xf6\x02\x51\x70\x21\xba\x5a\x1d\xc9\x3a\x5f\xa9\x97\xb3\x79\xaf\x2c\x2a\x6d\x1d\x23\x07\xdb\x1d\x61\x6c\x90\x6f\xcc\x01\xda\x84\x0a\x51\xf6\x3b\xc2\x63\x77\x3a\xe4\xb7\x96\x97\x00\x2c\xa3\x55\x57\x48\xba\xec\x49\x35\x94\xd5\x64\x36\xbc\x45\x9e\xe3\x01\xaf\xaf\xe8\xb2\xe7\x8e\x56\xac\xb8\xb5\x5e\xe7\x63\x8e\x77\x02\xab\xd6\xb0\x36\x3b\x8a\x72\x7f\xb9\x6c\xc8\x31\x47\xa5\x6a\x77\x4d\x0c\xef\x1b\xdf\x0b\xf4\xa0\xda\xd1\xc5\xe3\xfc\xbc\x40\xde\x5c\x7c\xa9\x0d\x9f\x2e\xfc\x58\xf2\xcf\x12\x62\xe8\x55\x7c\xcb\x4d\x67\x26\x1c\xcb\x73\x57\xd6\xd7\x1d\x1a\xd8\xbb\xb0\x36\x2c\xa4\xaf\xc0\x9e\x2c\x7b\xe9\x23\x24\x93\x6a\x42\x7e\x7f\x48\x35\xf7\x1c\xdf\xcb\x2f\xb0\x77\xe1\xa9\xfc\xee\x92\x95\x55\x1b\x17\x12\xfc\xe6\x4f\x93\xae\xa1\x01\x7e\x40\xc3\x2e\xfa\xf1\x3c\xdb\xbd\x62\x98\xb3\xdb\xf9\x8a\xe0\x8f\xe7\x5f\x4f\x99\x63\xab\xcd\x46\x57\xc7\xb0\xd1\x69\x58\xfc\xa9\x00\x7d\xd4\xf5\xd7\x4b\x61\x0a\x2e\x96\x6f\x36\xa5\x8f\x72\xf8\x6e\xfc\x0f\x00\x00\xff\xff\x1c\x3c\x16\x31\xe0\x04\x00\x00")

func dataDefaultJsBytes() ([]byte, error) {
	return bindataRead(
		_dataDefaultJs,
		"data/default.js",
	)
}

func dataDefaultJs() (*asset, error) {
	bytes, err := dataDefaultJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/default.js", size: 1248, mode: os.FileMode(493), modTime: time.Unix(1591307475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/ascii.table": dataAsciiTable,
	"data/default.js":  dataDefaultJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"ascii.table": &bintree{dataAsciiTable, map[string]*bintree{}},
		"default.js":  &bintree{dataDefaultJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
