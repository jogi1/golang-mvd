// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/ascii.table
// data/default.js
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAsciiTable = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x47\x03\xd1\xb1\x06\x86\x46\xc6\x26\xa6\x66\xe6\x16\x96\x20\xbe\x82\xa2\x92\xb2\x8a\xaa\x9a\xba\x86\xa6\x96\xb6\x8e\xae\x9e\x3e\x42\xd6\xca\xda\xc6\xd6\xce\xde\xc1\xd1\xc9\xd9\xc5\xd5\xcd\xdd\xc3\xd3\xcb\xdb\xc7\xd7\xcf\x3f\x20\x30\x28\x38\x24\x34\x2c\x3c\x22\x32\x2a\x3a\x26\x36\x2e\x5e\x3d\x31\x29\x39\x25\x35\x2d\x3d\x23\x33\x2b\x3b\x27\x37\x2f\xbf\xa0\xb0\xa8\xb8\xa4\xb4\xac\xbc\xa2\xb2\xaa\xba\xa6\xb6\x0e\xdd\x7a\xba\xdb\xcf\xcb\xc5\xcb\x05\x08\x00\x00\xff\xff\x7f\x57\x39\xd5\x04\x01\x00\x00")

func dataAsciiTableBytes() ([]byte, error) {
	return bindataRead(
		_dataAsciiTable,
		"data/ascii.table",
	)
}

func dataAsciiTable() (*asset, error) {
	bytes, err := dataAsciiTableBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/ascii.table", size: 260, mode: os.FileMode(493), modTime: time.Unix(1569577427, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDefaultJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x41\x8b\xdb\x3c\x10\x86\xef\x81\xfc\x87\x17\x9d\x6c\x22\xcc\x7e\x7c\xb7\x6e\x7d\x2d\xa5\xd0\x6d\x61\x7b\x5b\x07\x23\x36\xe3\x44\xd4\x96\x8d\x34\x09\x49\xb3\xfe\xef\x45\xb2\xe3\xd8\xa9\x97\xec\x25\xb1\x66\xe6\x91\xde\xd1\x68\xa6\xd8\x9b\x57\xd6\xb5\x41\xde\x20\xd2\x66\x43\x86\xf3\x92\x0e\x54\x4a\xfc\xa6\x93\xc4\x41\x95\x7b\x8a\x71\x5e\x2e\x80\x0a\x29\x84\xf0\x5f\x45\x6d\x11\x1d\xd3\x87\x47\x1c\x3f\x63\x4c\x3d\xe2\xb8\x5a\xf5\xe1\x1d\x50\x61\x05\x91\x71\xc0\x5a\xff\x63\x89\xf7\xd6\xf4\x76\x21\xb0\xf2\x07\x75\x8b\x4f\xe8\x0c\xe1\xd0\xde\xbf\x5c\xb4\xcb\xc5\x72\x31\xe8\xac\x4d\x5e\x68\xa3\xdd\x0e\x91\x63\xc5\x24\xe1\xff\x9c\x84\x23\x7b\x20\x2b\x51\x58\xb5\xad\xc8\x39\xb5\x25\xd7\x2b\x69\xac\x36\x1c\x89\x73\x66\x44\x7c\x5d\xe7\x4d\xf4\x9f\x84\xd8\xd5\x8e\x8d\xaa\x48\x48\x38\x65\x14\xeb\x3f\x14\x75\x7b\x25\x5f\x7b\x57\x1c\x4b\x08\x39\x4b\x57\xaa\xc9\xdf\xa1\xbf\xab\xe6\x03\x70\xa1\xcb\x59\xb8\xde\x50\x59\x6a\xc7\x2f\x0f\xeb\x38\x96\xb7\x1b\x88\x8c\x33\xd1\x94\xea\x44\xd6\xf9\x7b\x7b\xb9\xb8\x0f\xca\xa2\xd0\xd6\x31\x52\xb0\xdd\x13\x86\x72\xf9\x32\x1d\xa1\x4d\xb8\x2f\x4a\x7e\x76\xf0\x50\xab\x06\xe9\xd4\xf3\x12\x80\x75\xe7\xd5\x05\xa2\x26\x79\x52\x15\x25\x25\x99\x2d\xef\x90\xa6\x78\xc0\xdb\x1b\x9a\xe4\xb9\xa1\x57\x56\x5c\x5b\x6f\xf3\x67\x0e\x7b\x02\xaf\xb5\x61\x6d\xf6\xd4\xad\xdb\xeb\x66\xbd\xc6\x14\x85\x2a\xdd\x98\xe8\xf3\x1b\xf2\x05\x5a\x50\xe9\xe8\x1a\x71\x49\x2f\x90\x93\x8d\xaf\x77\xc3\xe7\x2b\x3f\x5c\xf9\xff\x12\xa2\xaf\x55\x97\xcb\xa4\x32\x33\x81\xf9\xa5\x2a\x9b\x71\x85\x7a\xf6\x2e\xac\x0d\x0b\xe9\x6f\xe0\x40\x96\xfd\xea\x23\x24\x93\xaa\x82\xbe\x5f\xa4\xaa\x7b\x81\xef\xe9\x0b\xec\x5d\x78\x4e\xdf\x5d\xd2\x77\x97\x0b\x02\xbf\xf8\xaf\xd9\xd0\x50\x00\xff\x40\x43\x67\xfa\xe7\x79\xf1\x7b\x43\xff\xce\xa6\xef\xab\x03\xbf\x3d\xff\x78\x4a\x1c\x5b\x6d\xb6\xba\x38\x85\xfe\x8e\xc3\x18\x98\x3b\xa0\xed\x6c\xed\xb8\x29\x4c\xc6\xd9\xfa\x9f\x56\xf1\xd6\xf1\x54\x18\xb5\xcb\xb4\x33\x66\x46\x07\xc6\x46\xff\xe8\x46\x21\x33\x19\x04\x65\x7e\x84\xdd\xa4\x32\xc2\x42\x46\x83\xc6\x89\x7c\x5e\xdf\x48\x6f\xbb\x75\x98\x80\x7f\x03\x00\x00\xff\xff\xad\x83\x0e\x5d\xaa\x05\x00\x00")

func dataDefaultJsBytes() ([]byte, error) {
	return bindataRead(
		_dataDefaultJs,
		"data/default.js",
	)
}

func dataDefaultJs() (*asset, error) {
	bytes, err := dataDefaultJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/default.js", size: 1450, mode: os.FileMode(493), modTime: time.Unix(1603223412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/ascii.table": dataAsciiTable,
	"data/default.js":  dataDefaultJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"ascii.table": &bintree{dataAsciiTable, map[string]*bintree{}},
		"default.js":  &bintree{dataDefaultJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
