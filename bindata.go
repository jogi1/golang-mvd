<<<<<<< HEAD
// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
=======
// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package main generated by go-bindata.// sources:
>>>>>>> 697644347f1bc141d5e81116dc565e059c5c8a3e
// data/ascii.table
// data/default.js
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

<<<<<<< HEAD
var _dataAsciiTable = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x47\x03\xd1\xb1\x06\x86\x46\xc6\x26\xa6\x66\xe6\x16\x96\x20\xbe\x82\xa2\x92\xb2\x8a\xaa\x9a\xba\x86\xa6\x96\xb6\x8e\xae\x9e\x3e\x42\xd6\xca\xda\xc6\xd6\xce\xde\xc1\xd1\xc9\xd9\xc5\xd5\xcd\xdd\xc3\xd3\xcb\xdb\xc7\xd7\xcf\x3f\x20\x30\x28\x38\x24\x34\x2c\x3c\x22\x32\x2a\x3a\x26\x36\x2e\x5e\x3d\x31\x29\x39\x25\x35\x2d\x3d\x23\x33\x2b\x3b\x27\x37\x2f\xbf\xa0\xb0\xa8\xb8\xa4\xb4\xac\xbc\xa2\xb2\xaa\xba\xa6\xb6\x0e\xdd\x7a\xba\xdb\xcf\xcb\xc5\xcb\x05\x08\x00\x00\xff\xff\x7f\x57\x39\xd5\x04\x01\x00\x00")
=======
var _dataAsciiTable = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x47\x03\xd1\xb1\x06\x86\x46\xc6\x26\xa6\x66\xe6\x16\x96\x20\xbe\x82\xa2\x92\xb2\x8a\xaa\x9a\xba\x86\xa6\x96\xb6\x8e\xae\x9e\x3e\x42\xd6\xca\xda\xc6\xd6\xce\xde\xc1\xd1\xc9\xd9\xc5\xd5\xcd\xdd\xc3\xd3\xcb\xdb\xc7\xd7\xcf\x3f\x20\x30\x28\x38\x24\x34\x2c\x3c\x22\x32\x2a\x3a\x26\x36\x2e\x5e\x3d\x31\x29\x39\x25\x35\x2d\x3d\x23\x33\x2b\x3b\x27\x37\x2f\xbf\xa0\xb0\xa8\xb8\xa4\xb4\xac\xbc\xa2\xb2\xaa\xba\xa6\xb6\x0e\xdd\x7a\xba\xdb\xcf\xc5\x05\x08\x00\x00\xff\xff\xd9\xcb\x04\x8f\x02\x01\x00\x00")
>>>>>>> 697644347f1bc141d5e81116dc565e059c5c8a3e

func dataAsciiTableBytes() ([]byte, error) {
	return bindataRead(
		_dataAsciiTable,
		"data/ascii.table",
	)
}

func dataAsciiTable() (*asset, error) {
	bytes, err := dataAsciiTableBytes()
	if err != nil {
		return nil, err
	}

<<<<<<< HEAD
	info := bindataFileInfo{name: "data/ascii.table", size: 260, mode: os.FileMode(438), modTime: time.Unix(1569248384, 0)}
=======
	info := bindataFileInfo{name: "data/ascii.table", size: 258, mode: os.FileMode(438), modTime: time.Unix(1587317162, 0)}
>>>>>>> 697644347f1bc141d5e81116dc565e059c5c8a3e
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

<<<<<<< HEAD
var _dataDefaultJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xcf\x8a\xdb\x30\x10\xc6\xef\x81\xbc\xc3\x87\x4e\x36\x11\x66\x4b\x6f\xdd\xfa\x56\x4a\x2f\x2d\x85\xf6\xb6\x5e\x8c\x48\xc6\x1b\x51\x5b\x16\xf2\x38\x64\x9b\xf5\xbb\x17\x59\x8a\x9d\x2c\xee\x6e\x2e\x46\xf3\xe7\x37\xa3\xf9\x46\xae\x7a\xb3\x65\xdd\x1a\x94\x16\x89\x36\x3b\x32\x5c\xd6\x74\xa0\x5a\xe2\x0f\x3d\x4b\x1c\x54\xdd\x53\x8a\xd3\x7a\x05\x34\xc8\x21\x84\x3f\x55\xad\x43\x72\xcc\xef\xee\x71\xfc\x8c\x4b\xea\x1e\xc7\xcd\x26\xa6\x07\xa0\xc1\x06\xa2\xe0\x11\x1b\xfc\xc7\x11\xf7\xce\x44\xbf\x10\xd8\xf8\x46\xc1\xf8\x84\xe0\x18\x9b\xc6\xf8\x7a\x35\xac\x57\xeb\xd5\x74\xcf\xd6\x94\x95\x36\xba\xdb\x23\x89\x7d\xac\xd3\x86\x13\x71\x2a\x8c\x48\x67\xbb\xb4\xc9\x07\x09\xb1\x6f\x3b\x36\xaa\x21\x21\xd1\x29\xa3\x58\xff\xa5\x64\x47\x4d\x9b\x7d\x8b\x81\x34\x95\x10\x72\x91\x6d\x94\x2d\x17\xd9\xef\xca\xde\x80\x56\xba\x5e\x44\xbd\x3f\x4d\xe5\x6b\x52\x14\x5c\x08\x5b\xab\x67\x72\x9d\x97\xe2\xe1\x1c\x3e\x28\x87\x4a\xbb\x8e\x91\x83\x5d\x4f\x98\x37\x00\x6d\x30\x96\xfd\x19\xb8\x49\x79\x8b\xfc\x2a\xf0\x70\x7c\x0c\x01\x5d\x21\xb1\xd9\x0f\xd5\x50\x56\x93\x79\xe2\x3d\xf2\x1c\x77\x78\x79\x81\xcd\x7e\x59\xda\xb2\xe2\xd6\x79\x9f\xef\x34\x95\x03\xb6\xad\x61\x6d\x7a\x0a\xf6\x30\x17\x8b\x37\xcb\x51\xa9\xba\xbb\x24\xe2\x54\xd3\x94\xc0\x00\xaa\x3b\x9a\x33\xce\x43\x8d\xe4\x55\xe1\x59\x11\x3e\xcd\xfc\xa4\xf0\x47\x09\xe1\x17\x50\x9e\xb5\xdd\x5d\xea\x1c\xc6\xbb\x5e\xce\x12\xac\x0d\x0b\xe9\x07\x3b\x90\x63\x6f\xdd\x42\x32\xa9\xe6\x7f\x6d\x7f\x93\x6a\xde\x87\x97\xda\xbe\x4b\x56\x4e\x3d\x75\x42\xc2\x66\x5f\xfd\xe9\xad\xd4\x1d\x29\xde\x87\xdc\x2f\xe3\x71\x31\x79\xd4\x76\x08\xbe\xe1\xf2\x11\x9a\x82\x8b\xc7\x57\x2f\x73\x08\x76\xfc\x15\xff\x05\x00\x00\xff\xff\x61\xbf\x9e\x5e\x33\x04\x00\x00")
=======
var _dataDefaultJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x4f\x8f\xd3\x30\x10\xc5\xef\xf9\x14\x4f\x3e\x25\x6a\x14\x2d\xe2\xc6\x92\x1b\x42\x80\xc4\x82\xb4\xdc\x36\xab\xc8\x6a\x27\xad\x45\xe2\x58\xf6\xa4\x6a\xe9\xe6\xbb\x23\x3b\x7f\x48\x51\xd8\x72\xcb\xcc\xbc\xdf\x4c\xe6\xd9\xae\x3a\xbd\x65\xd5\x6a\x94\x06\xb1\xd2\x3b\xd2\x5c\xd6\x74\xa4\x3a\xc5\x4f\x3a\xa7\x38\xca\xba\xa3\x04\x97\x08\x68\x90\x43\x88\x08\xa8\x5a\x8b\xf8\x94\xdf\xdd\xe3\xf4\x1e\x4b\xe6\x1e\xa7\xcd\x66\x10\x0f\xf2\x06\x1b\x88\x82\x3d\xd4\x47\x80\x25\xee\xac\x1e\xb3\x42\x60\xe3\x67\x0c\xc1\x3b\x0c\x89\x30\x6f\xac\x47\x7d\x14\xcd\xff\xd7\xea\xb2\x52\x5a\xb9\x03\xe2\x61\x82\xb1\x4a\x73\x2c\x2e\x85\x16\xc9\x1c\x96\x26\x7e\x93\x42\x1c\x5a\xc7\x5a\x36\x24\x52\x38\xa9\x25\xab\x5f\x14\xef\xa8\x69\xb3\x4f\x63\x21\x49\x52\x88\x74\x0d\x6d\xa4\x29\x57\xd1\xaf\xd2\xdc\x26\x2b\x55\xaf\x92\x3e\x9f\x24\xe9\x5f\xa0\x28\xb8\x10\xa6\x96\x67\xb2\xce\x5b\xf0\x34\x56\x8f\xd2\xa2\x52\xd6\x31\x72\xb0\xed\x08\xb3\xe9\x50\x1a\xa1\xe7\xf7\x81\x9a\xcc\x36\xc8\xaf\xf2\x4f\xa7\xe7\x90\x57\x15\x62\x93\x3d\xc8\x86\xb2\x9a\xf4\x9e\x0f\xc8\x73\xdc\xe1\xe5\x05\x26\x7b\x34\xb4\x65\xc9\xad\xf5\x39\x3f\x66\x6a\x06\x6c\x5b\xcd\x4a\x77\x14\xc2\x7e\xee\x34\xfe\x53\x8e\x4a\xd6\x6e\x21\x1f\xb7\x99\x96\x03\x7a\x50\xed\x68\xae\x4f\xbb\x04\x6c\xd1\xf3\x8f\x0b\x7c\x99\xd9\xd9\xd3\xb7\x29\x84\x77\xbc\x9c\xdc\xdc\x2d\x9d\x1d\xb6\xba\x3a\x8d\x35\x56\x69\x16\xa9\xdf\xe7\x48\x96\x7d\xf4\x1f\x20\x93\x6c\xfe\x35\xf4\x07\xc9\xe6\x26\xbb\x36\xf4\x16\x58\x59\xb9\x77\x22\x85\xc9\x3e\xfa\xaf\x57\x94\x3b\x92\x7c\x18\xa4\x1f\xc2\xe7\x2b\xda\xc7\x4e\x6d\xd5\x8e\x06\xf5\x14\xac\xe9\xc3\x21\xf8\xeb\xa8\x98\x1a\xc7\x92\xc3\x85\xbc\x92\x7c\x79\xfc\xf6\x90\x39\xb6\x4a\xef\x55\x75\x8e\x4d\xf6\x79\x92\x26\xe1\xc1\xae\x34\xec\x43\xaa\x5f\x5c\x78\x5d\x70\xf1\x7c\xfd\x08\xfa\x10\xfa\xc7\xfe\x3b\x00\x00\xff\xff\x90\x53\x5b\x45\x8d\x04\x00\x00")
>>>>>>> 697644347f1bc141d5e81116dc565e059c5c8a3e

func dataDefaultJsBytes() ([]byte, error) {
	return bindataRead(
		_dataDefaultJs,
		"data/default.js",
	)
}

func dataDefaultJs() (*asset, error) {
	bytes, err := dataDefaultJsBytes()
	if err != nil {
		return nil, err
	}

<<<<<<< HEAD
	info := bindataFileInfo{name: "data/default.js", size: 1075, mode: os.FileMode(438), modTime: time.Unix(1569251989, 0)}
=======
	info := bindataFileInfo{name: "data/default.js", size: 1165, mode: os.FileMode(438), modTime: time.Unix(1587317162, 0)}
>>>>>>> 697644347f1bc141d5e81116dc565e059c5c8a3e
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/ascii.table": dataAsciiTable,
	"data/default.js":  dataDefaultJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"ascii.table": &bintree{dataAsciiTable, map[string]*bintree{}},
		"default.js":  &bintree{dataDefaultJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
