// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/ascii.table
// data/default.js
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAsciiTable = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x47\x03\xd1\xb1\x06\x86\x46\xc6\x26\xa6\x66\xe6\x16\x96\x20\xbe\x82\xa2\x92\xb2\x8a\xaa\x9a\xba\x86\xa6\x96\xb6\x8e\xae\x9e\x3e\x42\xd6\xca\xda\xc6\xd6\xce\xde\xc1\xd1\xc9\xd9\xc5\xd5\xcd\xdd\xc3\xd3\xcb\xdb\xc7\xd7\xcf\x3f\x20\x30\x28\x38\x24\x34\x2c\x3c\x22\x32\x2a\x3a\x26\x36\x2e\x5e\x3d\x31\x29\x39\x25\x35\x2d\x3d\x23\x33\x2b\x3b\x27\x37\x2f\xbf\xa0\xb0\xa8\xb8\xa4\xb4\xac\xbc\xa2\xb2\xaa\xba\xa6\xb6\x0e\xdd\x7a\xba\xdb\xcf\xcb\xc5\xcb\x05\x08\x00\x00\xff\xff\x7f\x57\x39\xd5\x04\x01\x00\x00")

func dataAsciiTableBytes() ([]byte, error) {
	return bindataRead(
		_dataAsciiTable,
		"data/ascii.table",
	)
}

func dataAsciiTable() (*asset, error) {
	bytes, err := dataAsciiTableBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/ascii.table", size: 260, mode: os.FileMode(493), modTime: time.Unix(1569577427, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDefaultJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4f\x8b\xdb\x3e\x10\xbd\x07\xf2\x1d\x1e\x3a\xd9\x44\x78\xf7\xc7\xef\xd6\xad\xaf\xa5\x14\xba\x2d\x6c\x6f\xeb\x60\xc4\xee\x38\x11\xb5\x65\x23\x4d\x42\xd2\xac\xbf\x7b\x91\xec\x38\x76\xea\x25\x7b\x49\xac\x99\x79\xa3\xf7\xe6\x8f\x8a\x9d\x79\x61\x5d\x1b\xe4\x0d\x22\x6d\x5e\xc9\x70\x5e\xd2\x9e\x4a\x89\xdf\x74\x94\xd8\xab\x72\x47\x31\x4e\xcb\x05\x50\x21\x85\x10\xfe\xab\xa8\x2d\xa2\x43\x7a\xff\x80\xc3\x67\x8c\x51\x0f\x38\xac\x56\x7d\x78\x07\xa8\xb0\x82\xc8\x38\xc0\x5a\xff\x63\x89\x77\xd6\xf4\x76\x21\xb0\xf2\x17\x75\x87\x4f\xe8\x0c\xe1\xd2\xde\xbf\x5c\xb4\xcb\xc5\x72\x31\xf0\xac\x4d\x5e\x68\xa3\xdd\x16\x91\x63\xc5\x24\xe1\xff\x9c\x84\x23\xbb\x27\x2b\x51\x58\xb5\xa9\xc8\x39\xb5\x21\x27\xd1\x94\xea\x48\xd6\xf5\x94\x1a\xab\x0d\x47\xe2\x94\x19\x11\x5f\xce\x79\x13\xfd\x27\x21\xb6\xb5\x63\xa3\x2a\x12\x12\x4e\x19\xc5\xfa\x0f\x45\x5d\xd2\xe4\x6b\xef\x8a\x63\x09\x21\x67\xd1\x95\x6a\xf2\x77\xd0\xdf\x55\xf3\x01\x70\xa1\xcb\x59\x70\xfd\x4a\x65\xa9\x1d\x3f\xdf\xaf\xe3\x58\x5e\x27\x10\x19\x67\xa2\x17\xe9\x0b\xf8\x7c\x76\xef\x95\x45\xa1\xad\x63\xa4\x60\xbb\x23\x0c\x7d\xf3\xfd\x3a\x40\x9b\x50\x38\x4a\x7e\x4e\x2a\x04\x34\x48\xa7\x9e\xe7\x00\x58\x77\x5e\x5d\x20\x6a\x92\x47\x55\x51\x52\x92\xd9\xf0\x16\x69\x8a\x7b\xbc\xbd\xa1\x49\x9e\x1a\x7a\x61\xc5\xb5\xf5\x36\x7f\xe7\x90\x13\x78\xa9\x0d\x6b\xb3\xa3\xee\xdc\x5e\x92\xf5\x1c\x53\x14\xaa\x74\x63\x44\xaf\x6f\xd0\x0b\xb4\xa0\xd2\xd1\x25\xe2\x2c\x2f\x20\x27\x89\x2f\xb5\xe1\xd3\x05\x7f\x77\x37\x14\xfd\x7f\x09\xd1\x77\xab\x53\x33\xe9\xcd\xa8\x3b\xe7\xc0\xfc\xdc\x97\xd7\x71\x8f\x7a\xec\x4d\xb0\x36\x2c\xa4\xaf\xc1\x9e\x2c\xfb\xd3\x47\x90\x4c\xaa\x0a\xfc\x7e\x91\xaa\x6e\x05\xbe\xc7\x2f\x60\x6f\x82\xe7\xf8\xdd\x44\xfa\x45\x73\x81\xe0\x17\xff\x35\x1b\x1a\x5a\xe0\x47\x34\x2c\xa9\x1f\xd0\xb3\xdf\x1b\xfa\x49\x9b\x4e\x58\x07\xfc\xf6\xf4\xe3\x31\x71\x6c\xb5\xd9\xe8\xe2\x18\x56\x3d\x0e\x2f\xc2\xdc\x05\x6d\x67\x6b\xc7\x6b\x61\x32\xce\xd6\xff\x2c\x8b\xe9\xd8\x8c\xdf\x88\xc9\xd6\x4c\x17\x64\x1c\x36\x4c\xe6\xc8\xe8\x67\x6f\x14\x32\x23\x23\xd0\xf3\x4f\xda\x95\x9e\x11\x2c\xc8\x1a\x88\x4e\x34\xf0\xfa\x8a\x7f\xdb\x9d\xc3\x8b\xf8\x37\x00\x00\xff\xff\xee\x64\x51\x80\xba\x05\x00\x00")

func dataDefaultJsBytes() ([]byte, error) {
	return bindataRead(
		_dataDefaultJs,
		"data/default.js",
	)
}

func dataDefaultJs() (*asset, error) {
	bytes, err := dataDefaultJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/default.js", size: 1466, mode: os.FileMode(493), modTime: time.Unix(1609360559, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/ascii.table": dataAsciiTable,
	"data/default.js":  dataDefaultJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"ascii.table": &bintree{dataAsciiTable, map[string]*bintree{}},
		"default.js":  &bintree{dataDefaultJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
