// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/ascii.table
// data/default.js
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAsciiTable = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x47\x03\xd1\xb1\x06\x86\x46\xc6\x26\xa6\x66\xe6\x16\x96\x20\xbe\x82\xa2\x92\xb2\x8a\xaa\x9a\xba\x86\xa6\x96\xb6\x8e\xae\x9e\x3e\x42\xd6\xca\xda\xc6\xd6\xce\xde\xc1\xd1\xc9\xd9\xc5\xd5\xcd\xdd\xc3\xd3\xcb\xdb\xc7\xd7\xcf\x3f\x20\x30\x28\x38\x24\x34\x2c\x3c\x22\x32\x2a\x3a\x26\x36\x2e\x5e\x3d\x31\x29\x39\x25\x35\x2d\x3d\x23\x33\x2b\x3b\x27\x37\x2f\xbf\xa0\xb0\xa8\xb8\xa4\xb4\xac\xbc\xa2\xb2\xaa\xba\xa6\xb6\x0e\xdd\x7a\xba\xdb\xcf\xcb\xc5\xcb\x05\x08\x00\x00\xff\xff\x7f\x57\x39\xd5\x04\x01\x00\x00")

func dataAsciiTableBytes() ([]byte, error) {
	return bindataRead(
		_dataAsciiTable,
		"data/ascii.table",
	)
}

func dataAsciiTable() (*asset, error) {
	bytes, err := dataAsciiTableBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/ascii.table", size: 260, mode: os.FileMode(493), modTime: time.Unix(1569577427, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDefaultJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x4f\x8f\xda\x3c\x10\xc6\xef\x48\x7c\x87\x47\x3e\x25\xc2\x8a\x78\xf5\xde\xba\xcd\xb5\xaa\x2a\xed\xb6\xd2\xf6\x46\x50\x64\xc1\x04\xac\x26\x4e\x64\x0f\x08\xca\xe6\xbb\x57\xb6\x43\x80\x15\x2b\xf6\x02\x9e\x3f\x3f\x7b\x3c\x8f\x27\xd5\xce\xac\x58\xb7\x06\x65\x87\x44\x9b\x35\x19\x2e\x6b\xda\x53\x2d\xf1\x87\x8e\x12\x7b\x55\xef\x28\xc5\x69\x3a\x01\x1a\xe4\x10\xc2\xaf\xaa\xd6\x22\x39\xe4\xf3\x27\x1c\xbe\xe2\x9a\x7a\xc2\x61\x36\x1b\xd2\x23\xd0\x60\x06\x51\x70\xc0\x7a\xff\x63\x89\x77\xd6\x0c\x7e\x21\x30\xf3\x07\x45\xe3\x0b\xa2\x23\x1c\x3a\xc4\xa7\x93\x7e\x3a\x99\x4e\xc6\x3a\x5b\x53\x56\xda\x68\xb7\x45\xe2\x58\x31\x49\xf8\x3f\x27\xb1\xa6\xa6\x95\x70\x64\xf7\x64\x87\x0a\x3a\xab\x0d\x27\xe2\x54\x18\x91\x5e\xec\xb2\x4b\xfe\x93\x10\xdb\xd6\xb1\x51\x0d\x09\x09\xa7\x8c\x62\xfd\x97\x92\x48\x67\xdf\x87\x50\x9a\x4a\x08\x79\x97\x6e\x54\x57\x7e\x40\x3f\xab\xee\x13\x70\xa5\xeb\x1b\xd8\x97\x9f\x3d\xb7\x6b\xaa\x6b\xed\x78\x31\x5f\xa6\xa9\x7c\x8f\x8b\x82\x0b\xd1\xd5\xea\x48\xd6\xf9\x6e\x2d\xce\xe1\xbd\xb2\xa8\xb4\x75\x8c\x1c\x6c\x77\x84\x51\x24\x2f\xce\x01\xda\x84\x2e\x51\xf6\x2b\xc2\xa3\x42\x1d\xf2\xdb\xc8\x22\x00\xcb\x18\xd5\x15\x92\x2e\x7b\x51\x0d\x65\x35\x99\x0d\x6f\x91\xe7\x98\xe3\xed\x0d\x5d\xf6\xda\xd1\x8a\x15\xb7\xd6\xfb\xfc\x99\xe3\x9e\xc0\xaa\x35\xac\xcd\x8e\xa2\xdd\x5f\x36\x1b\x6a\xcc\x51\xa9\xda\x5d\x13\xc3\xfd\xc6\xfb\x02\x3d\xa8\x76\x74\xc9\x38\x5f\x2f\x90\x37\x1b\x5f\x7a\xc3\xa7\x0b\x3f\x36\xfc\x7f\x09\x31\x28\x15\xef\x72\xa3\xcb\x9d\xc4\xf2\xac\xc9\xfa\x5a\x9f\x81\x7d\x08\x6b\xc3\x42\xfa\x0e\xec\xc9\xb2\xb7\x3e\x43\x32\xa9\x26\xd4\xf7\x9b\x54\xf3\x28\xf1\xa3\xfa\x02\xfb\x10\xbe\x57\xdf\x43\xb2\xb2\x6a\xe3\x42\x81\xdf\xfc\xea\x6e\x6a\x10\xc0\x3f\xd0\x30\x8f\xfe\x79\x9e\xe3\xde\x31\xbc\xb3\xdb\xf7\x15\xc1\x1f\xaf\x3f\x5f\x32\xc7\x56\x9b\x8d\xae\x8e\x61\xaa\xd3\x30\xfc\xf7\x0e\xe8\xa3\xaf\xbf\x1e\x0a\x53\x70\xb1\x7c\x37\x29\x7d\xb4\xc3\xb7\xe3\x5f\x00\x00\x00\xff\xff\x78\x69\x6b\x7e\xe4\x04\x00\x00")

func dataDefaultJsBytes() ([]byte, error) {
	return bindataRead(
		_dataDefaultJs,
		"data/default.js",
	)
}

func dataDefaultJs() (*asset, error) {
	bytes, err := dataDefaultJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/default.js", size: 1252, mode: os.FileMode(493), modTime: time.Unix(1591285112, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/ascii.table": dataAsciiTable,
	"data/default.js":  dataDefaultJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"ascii.table": &bintree{dataAsciiTable, map[string]*bintree{}},
		"default.js":  &bintree{dataDefaultJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
