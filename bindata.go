// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/ascii.table
// data/default.js
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAsciiTable = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x47\x03\xd1\xb1\x06\x86\x46\xc6\x26\xa6\x66\xe6\x16\x96\x20\xbe\x82\xa2\x92\xb2\x8a\xaa\x9a\xba\x86\xa6\x96\xb6\x8e\xae\x9e\x3e\x42\xd6\xca\xda\xc6\xd6\xce\xde\xc1\xd1\xc9\xd9\xc5\xd5\xcd\xdd\xc3\xd3\xcb\xdb\xc7\xd7\xcf\x3f\x20\x30\x28\x38\x24\x34\x2c\x3c\x22\x32\x2a\x3a\x26\x36\x2e\x5e\x3d\x31\x29\x39\x25\x35\x2d\x3d\x23\x33\x2b\x3b\x27\x37\x2f\xbf\xa0\xb0\xa8\xb8\xa4\xb4\xac\xbc\xa2\xb2\xaa\xba\xa6\xb6\x0e\xdd\x7a\xba\xdb\xcf\xcb\xc5\xcb\x05\x08\x00\x00\xff\xff\x7f\x57\x39\xd5\x04\x01\x00\x00")

func dataAsciiTableBytes() ([]byte, error) {
	return bindataRead(
		_dataAsciiTable,
		"data/ascii.table",
	)
}

func dataAsciiTable() (*asset, error) {
	bytes, err := dataAsciiTableBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/ascii.table", size: 260, mode: os.FileMode(493), modTime: time.Unix(1569577427, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDefaultJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x41\x8b\xdb\x3c\x10\x86\xef\x81\xfc\x87\x17\x9d\x6c\x62\xcc\x7e\x7c\xb7\x6e\x7d\x2b\xa5\x2d\x74\x5b\x48\x6f\xeb\xc5\x88\x64\x9c\x88\xda\xb2\x90\xc6\x21\x69\xd6\xff\xbd\xc8\x72\xec\x64\x71\x77\x97\x40\xd0\xcc\xbc\xcf\x8c\x67\xc6\x72\xd9\xea\x0d\xab\x46\xa3\x30\x88\x94\xde\x92\xe6\xa2\xa2\x03\x55\x09\x7e\xd3\x29\xc1\x41\x56\x2d\xc5\x38\x2f\x17\x40\x8d\x0c\x42\xf8\x53\xd9\x58\x44\xc7\xec\xee\x1e\xc7\x8f\xb8\xa6\xee\x71\x5c\xad\x06\x79\x00\x6a\xac\x20\x72\xee\xb1\xce\xff\x59\xe2\xd6\xea\xc1\x2f\x04\x56\xbe\x50\x30\x3e\x20\x38\xfa\xa2\x43\x7c\xb9\xe8\x96\x8b\xe5\x62\x7c\xce\x46\x17\xa5\xd2\xca\xed\x11\x0d\x75\x8c\x55\x9a\x23\x71\xce\xb5\x88\x27\xbb\x30\xd1\x7f\x09\xc4\xbe\x71\xac\x65\x4d\x22\x81\x93\x5a\xb2\xfa\x43\xd1\x96\xea\x26\xfd\x32\x04\xe2\x38\x81\x48\x66\xd9\x5a\x9a\x62\x96\xfd\x2e\xcd\x3b\xd0\x52\x55\xb3\xa8\xf7\xc7\x71\xf2\x92\x14\x39\xe7\xc2\x54\xf2\x44\xd6\xf9\x51\x3c\x5e\xc2\x07\x69\x51\x2a\xeb\x18\x19\xd8\xb6\x84\x69\x03\x50\x1a\x7d\xda\x9f\x81\x1b\x27\x6f\x90\xdd\x04\x1e\x8f\x4f\x21\xa0\x4a\x44\x26\x7d\x90\x35\xa5\x15\xe9\x1d\xef\x91\x65\xb8\xc3\xf3\x33\x4c\xba\x36\xb4\x61\xc9\x8d\xf5\x3e\x5f\x69\x4c\x07\x6c\x1a\xcd\x4a\xb7\x14\xec\x6e\x4a\x36\x3c\x59\x86\x52\x56\xee\x9a\x18\xba\x1a\xbb\x04\x3a\x50\xe5\x68\x52\x5c\x9a\xea\xc9\x9b\xc4\xd3\x44\xf8\x3c\xf1\xe3\x84\xff\x4f\x20\xfc\x02\x8a\xcb\x6c\xb7\xd7\x73\x0e\xed\xdd\x2e\x67\x0e\x56\x9a\x45\xe2\x1b\x3b\x90\x65\x6f\xbd\x87\x64\x92\xf5\xbf\xca\xfe\x22\x59\xbf\x0d\xcf\x95\x7d\x93\x2c\xad\xdc\x39\x91\xc0\xa4\x9f\xfd\xe9\x35\xe9\x96\x24\xef\x83\xf6\x53\x7f\x7c\x4d\xbc\x6e\xd5\x46\x6d\x29\xc8\x2f\xc6\x2c\xd0\x2f\xc3\xbf\xa2\x8a\xa9\x76\x2c\xb9\x7f\x49\x6f\x35\xdf\xd6\x3f\x1e\x52\xc7\x56\xe9\x9d\x2a\x4f\x91\x49\xbf\x5e\xb4\x71\x7f\x9b\xe7\x52\x76\xc1\xd7\x5d\x5f\x04\x9d\x73\xfe\xf4\xe2\x76\x74\xc1\xf6\xbf\xfe\x83\xf0\x37\x00\x00\xff\xff\xa3\x4a\x45\xf6\xb9\x04\x00\x00")

func dataDefaultJsBytes() ([]byte, error) {
	return bindataRead(
		_dataDefaultJs,
		"data/default.js",
	)
}

func dataDefaultJs() (*asset, error) {
	bytes, err := dataDefaultJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/default.js", size: 1209, mode: os.FileMode(493), modTime: time.Unix(1591051991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/ascii.table": dataAsciiTable,
	"data/default.js":  dataDefaultJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"ascii.table": &bintree{dataAsciiTable, map[string]*bintree{}},
		"default.js":  &bintree{dataDefaultJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
